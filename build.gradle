import com.google.common.base.Utf8
import me.modmuss50.mpp.ReleaseType

plugins {
    id 'eclipse'
    id 'idea'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'com.palantir.git-version' version '3.0.0'
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
    id 'org.spongepowered.mixin' version '0.7.+'
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

group = mod_group_id
//version = mod_version
version = gitVersion()

base {
    archivesName = archive_base_name + "-" + "Forge" + "-" + project.mapping_version
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, "mixins.${mod_id}.refmap.json"
    config "mixins.${mod_id}.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

sourceSets {
    main {
        ext.refMap = "mixins.${mod_id}.refmap.json"
    }
}

repositories {
    maven { url "https://maven.shedaniel.me/" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    // Apply Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation("org.spongepowered:mixin:0.8.5")

    implementation("me.shedaniel.cloth:cloth-config-forge:11.1.118")
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
                "MixinConfigs": "mixins.${mod_id}.json",
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

publishMods {
    displayName = "${project.mod_name}-Forge-${project.mapping_version}-${project.version}"
    file = jar.archiveFile
    changelog = file("changelog.txt").getText("UTF-8")
    type = ReleaseType.STABLE
    modLoaders.add("forge")

    curseforge {
        projectId = properties.get("CURSEFORGE_PROJECT_ID")
        projectSlug = "mojang-logo-animation" // Required for discord webhook
        accessToken = properties.get("CURSEFORGE_API_KEY")
        minecraftVersions.add("${project.mapping_version}")
        requires("cloth-config")
    }
}